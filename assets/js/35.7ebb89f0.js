(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{236:function(t,s,a){"use strict";a.r(s);var e=a(0),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("ol",[a("li",[t._v("先说说自己对当今前端的理解吧，个人认为前端在一些体系较大的公司中，前端是分为前端的前端－－－也就是注重用户体验（专注 CSS 和一些 3D 特效，大屏数据分析等），即与设计师的配合，还有就是前端的后端---也就是注重逻辑，技能更偏向基于 JS 衍生的第三方框架或者库，像是 vue,react 等，虽然此类框架官方虽然说用于构建 UI 界面，个人觉得他们还是会更偏向逻辑的交互，即与后端的配合，也就是前端的后端。")]),t._v(" "),a("li",[t._v("飞冰与去年十月份左右开源，记得那时被官方牛逼哄哄的让前端开发简单友好所好奇，对其整个构建体系都还没有怎么看懂，只是知道这玩意已经服务与阿里很多部门，下载了里面订单管理系统的物料，一周不到使用 egg.js 和 react 基于其方便可配置的特性把后台管理系统撸了出来，就是感觉好快，可能是前后台都是自己写吧，所以很多数据返回的就是前端 demo 所需要的数据格式，也不用再去做什么转换之类的。那时候对其的了解就停止在这个地步了。")]),t._v(" "),a("li",[t._v("直到 19 年也就是今年七月份初，被老大叫去研究，打算投入到我们的 BU 的生产中，其基于 fusionDesign 的高度可配置化，一整个流程前端几乎不用写什么所谓的 CSS 和配置颜色等，这些在初期设计师就已经根据该 UI 框架配置出了一整套的颜色搭配和组件的配色以及其他规范，官方生成配置包并发布到ｎｐｍ，发布后使用 ice-script 脚手架构建的 react 项目中只要下载并导入 UI 规范包即可使用设计师配置的主题和规范来书写逻辑，让前端更专注与逻辑。")])]),t._v(" "),a("h2",{attrs:{id:"fd-和可视化模版搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fd-和可视化模版搭建"}},[t._v("#")]),t._v(" FD 和可视化模版搭建")]),t._v(" "),a("p",[t._v("使用飞冰一整个生态体系的前提是你要有一定的 react 的基础和编码能力，具体相关技术可以先花点时间学习")]),t._v(" "),a("h2",{attrs:{id:"fusion-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fusion-design"}},[t._v("#")]),t._v(" Fusion Design")]),t._v(" "),a("p",[t._v("功能与 antd 类似的一套 UI 库，配合自身提供的主题换肤功能和设计师语言，使用 npm 进行配色主题存储，能快速的对项目进行换肤调整，避免和前端的无效沟通。")]),t._v(" "),a("h2",{attrs:{id:"iceworks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceworks"}},[t._v("#")]),t._v(" iceworks")]),t._v(" "),a("p",[t._v("前端组件，区块，物料展示和组合工具，以及对项目模版的菜单，路由等基础功能和页面搭建的可视化管理，工程打包运行等功能。")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);s.default=r.exports}}]);