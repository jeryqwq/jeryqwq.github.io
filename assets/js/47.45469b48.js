(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{252:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"导学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导学"}},[t._v("#")]),t._v(" 导学")]),t._v(" "),a("h4",{attrs:{id:"为什么要了解操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要了解操作系统"}},[t._v("#")]),t._v(" 为什么要了解操作系统")]),t._v(" "),a("p",[t._v("相比在大学时期大家还懵懵懂懂的时候就已经了解或接触过操作系统相关课程，但苦于代码量和能力的欠缺，对操作系统相关的东西还是有些不理解或是没有弄懂，为什么要这么设计操作系统，为什么要有线程，进程，许多并发场景操作系统是如何解决的，时间分片机制带来了哪些好处和问题，垃圾回收机制是如何在代码运行时高效清除不适用的对象。")]),t._v(" "),a("h4",{attrs:{id:"好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[t._v("#")]),t._v(" 好处")]),t._v(" "),a("p",[t._v("学习操作系统的设计思路，抽象，全局的去思考并解决一个问题,巩固基础知识，让代码更健壮， 加强代码的抽象能力和数据结构算法的基础使用能力,任何复杂业务中的问题最终都会抽象为操作系统以及相关基础知识的实现，无论前后端。")]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("h3",{attrs:{id:"操作系统主要做了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统主要做了什么"}},[t._v("#")]),t._v(" 操作系统主要做了什么")]),t._v(" "),a("h4",{attrs:{id:"总结三个字-不要停"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结三个字-不要停"}},[t._v("#")]),t._v(" 总结三个字: 不要停")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  while(true){\n    // 期间不能关机，不能停下，我要一直做事情，不然就宕机了\n    // 跑网易云云月， vscode, nodejs，游戏...\n  }\n")])])]),a("h4",{attrs:{id:"操作系统启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统启动"}},[t._v("#")]),t._v(" 操作系统启动")]),t._v(" "),a("ol",[a("li",[t._v("开机   // 操作系统还在硬盘")]),t._v(" "),a("li",[t._v("Bios  //BASIC I/O System  最最基础的系统，仅支持汇编指令   move xxxxx  xxxxx")]),t._v(" "),a("li",[t._v("装载引导程序MBR(master boot record) => 分区引导程序 => 转交内核给操作系统(go to 操作系统的代码行)")]),t._v(" "),a("li",[t._v("操作系统接管控制")])]),t._v(" "),a("h3",{attrs:{id:"操作系统的能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的能力"}},[t._v("#")]),t._v(" 操作系统的能力")]),t._v(" "),a("h4",{attrs:{id:"连接硬件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接硬件"}},[t._v("#")]),t._v(" 连接硬件")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("鼠标，打印机等： 硬件设备 => 总线 => (内存 && CPU中断) => 操作系统\n"),a("img",{attrs:{src:t.$withBase("./../imgs/system1.png")}}),t._v("\n按键与内存中的按键缓冲区映射， 用户按下按键后会产生中断，操作系统接管了CPU中断，感知到用户按下某按键 => 发送EVENT事件至各大APP\n"),a("code",[t._v("Ring Buffer（键盘缓冲区）: 记录键盘按下的key的顺序，是一个环状且超出覆盖的缓冲区， 系统卡顿的时候按下多个按键操作系统会滴滴滴的叫,因为ring buffer满了")])])]),t._v(" "),a("li",[a("p",[t._v("管理和调度应用:\n抽象 ｜ 隔离 ｜ 管理 ｜ 调度\n"),a("br")]),t._v(" "),a("p",[t._v("抽象："),a("code",[t._v("文件，硬件抽象出可理解的资源，比如文件对于磁盘只有磁道，扇区，柱面，变为可展开的树形结构目录")]),t._v(" "),a("br"),t._v("\n隔离：\n"),a("code",[t._v("隔离每个应用， 应用之间不能冲突（外挂是如何做的： 修改游戏内某内存的数据，达到修改攻击等数据的）")]),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("管理\n"),a("code",[t._v("关闭，强制退出，最小化，后台运行，应用异常")]),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("调度\n"),a("code",[t._v("系统级别的进程肯定优先于用户的进程")])])]),t._v(" "),a("li",[a("p",[t._v("用户可以管理操作系统:\n文件，app， UI，分辨率设置，开机密码， shell等")])])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("操作系统是一个管理硬件设备（管理）， 资源以及应用程序；将硬件的能力，资源抽象成服务让应用程序使用(抽象)")]),t._v(" "),a("h2",{attrs:{id:"内核和内核设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核和内核设计"}},[t._v("#")]),t._v(" 内核和内核设计")]),t._v(" "),a("h3",{attrs:{id:"分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),a("ol",[a("li",[t._v("内核: 时钟，进程管理，进程调度，中断处理，进程通信等(内核态)")]),t._v(" "),a("li",[t._v("驱动： 打印机，显示器，磁盘，鼠标，键盘 （用户态）")]),t._v(" "),a("li",[t._v("服务： 文件服务，进程服务，自检（用户态）")]),t._v(" "),a("li",[t._v("应用：图形化界面和command终端（用户态）")])]),t._v(" "),a("h3",{attrs:{id:"权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权限"}},[t._v("#")]),t._v(" 权限")]),t._v(" "),a("ol",[a("li",[t._v("拆分权限（端口，文件，操作）")]),t._v(" "),a("li",[t._v("多态， 区分用户态和内核态(访问相册（同意后切换到内核态） => 再次切换回到原有的进程(用户态) )")])]),t._v(" "),a("h3",{attrs:{id:"内核设计-参照b-s结构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核设计-参照b-s结构设计"}},[t._v("#")]),t._v(" 内核设计: 参照B/S结构设计")]),t._v(" "),a("img",{attrs:{src:t.$withBase("./../imgs/system2.png")}}),t._v(" "),a("h3",{attrs:{id:"为什么要用微内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用微内核"}},[t._v("#")]),t._v(" 为什么要用微内核")]),t._v(" "),a("ol",[a("li",[t._v("内核职责越少，可扩展性就越强。")]),t._v(" "),a("li",[t._v("现实中的其他系统设计： 分布式系统底层只是在做记录（区块链，日志系统），3D游戏引擎也只是做渲染。")]),t._v(" "),a("li",[t._v("OSI七层模型  物数网传会表应")]),t._v(" "),a("li",[t._v("所有程序语言最底层就是机器指令(操作码 + 地址码)，上层是汇编(三地址代码, move xxx xxx)，在上层是高级语言")])]),t._v(" "),a("h2",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),a("p",[t._v("操作系统的核心是程序， 操作系统对一个正在运行的程序的抽象就是进程，是操作系统调度资源的最小单位, 程序就是一段代码，这段代码只有运行时才算进程，在硬盘就不是了")]),t._v(" "),a("h3",{attrs:{id:"抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),a("p",[t._v("在早起的计算机中只有一个核心，所有程序共享一个时间片段，操作系统需要提供一个模型去管理所有的程序，让程序以为CPU就只为他一个程序服务，于是就诞生了操作系统肿最核心的概念-进程(当我们写代码调试的时候，代码执行了一行然后下一行，就好像感觉CPU在一直为我工作， 其实不是，CPU很快，快到纳秒级别，10的-10次方这么短，基于CPU的中断和时间分片机制，他可以在处理你的代码后分享时间片给其他程序，比如你还能听歌，看视频，敲键盘，移动鼠标等)")]),t._v(" "),a("h3",{attrs:{id:"进程的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[t._v("#")]),t._v(" 进程的状态")]),t._v(" "),a("ol",[a("li",[t._v("进程管理\n（适配中断机制，需要记录自己的状态信息，否则下次拥有执行权时无法知道自己上次到哪了）寄存器， 程序计数器， 程序状态子，堆栈指针（SP）, 优先级，父进程ID...")]),t._v(" "),a("li",[t._v("存储管理\n程序段指针, 堆栈段指针， 数据段指针。 需要存储堆栈，空闲区，数据，程序")]),t._v(" "),a("li",[t._v("文件管理\n根目录， 工作目录，文件描述，用户ID...\n"),a("br")])]),t._v(" "),a("p",[a("code",[t._v("所以，进程是一种数据结构，是一张能描述以上信息的表")])]),t._v(" "),a("h3",{attrs:{id:"c-创建进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-创建进程"}},[t._v("#")]),t._v(" C 创建进程")]),t._v(" "),a("h4",{attrs:{id:"fork函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork函数"}},[t._v("#")]),t._v(" fork函数")]),t._v(" "),a("p",[t._v("fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：")]),t._v(" "),a("ol",[a("li",[t._v("在父进程中，fork返回新创建子进程的进程ID；")]),t._v(" "),a("li",[t._v("在子进程中，fork返回0；")]),t._v(" "),a("li",[t._v("如果出现错误，fork返回一个负值；")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file test.c")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\npid_t pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am child\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am parent"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("使用gcc编译后生成a.out文件(相关编译模块的可以移步到编译原理查看)")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gcc ./test.c "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接编译成可执行文件， 跳过gcc四步骤(...汇编，机器码)")]),t._v("\n")])])]),a("p",[t._v("基于上述特性，我们将代码拆分开")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\npid_t pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fork调用后会重新冲改行开始开启一个进程去执行之后的代码")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父进程内， pid不等于0, 故不进入if")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am child\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am parent"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行后返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程中pid = 0，进入if")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am child\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i am parent"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("适用于异步场景，当我们异步获取一个值后开一个进程去做相关的事情，父进程继续处理代码之后的任务。")])]),t._v(" "),a("p",[t._v("所以上述代码会先打印parent后打印child")]),t._v(" "),a("h3",{attrs:{id:"进程的状态-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态-2"}},[t._v("#")]),t._v(" 进程的状态")]),t._v(" "),a("p",[t._v("想象CPU在跑每一个进程时，每一个进程都有优先级和执行配额（当前可执行的时间），P1进程正在执行，这时P2是一个优先级更高正在等待执行的进程，当P1用完了他的配额，就会进入就绪状态，继续等待下一个执行时机，CPU就会触发中断机制，保存P1执行的现场，即上述的表结构，从而去执行P2进程，这时，P3进程也进来了，但P3进程他有用到硬盘数据，这会导致他进入阻塞状态，P3进程必须等待硬盘数据读取到内存中才能切换到就绪(排队等待被执行)状态等待继续执行")]),t._v(" "),a("img",{attrs:{src:t.$withBase("./../imgs/system3.png")}}),t._v(" "),a("p",[a("code",[t._v("这里拓展下为什么node那么快，我们一打开官网官方就会说明node是一个异步非阻塞IO的服务端框架,当有读取磁盘或者处理request等异步场景时，基于eventLoop的事件模型，node能继续往下执行其他代码，只有等到读取完成了才会执行内部的代码,在不等待文件读取完成的情况下运行下面的代码的能力是一个可以提高吞吐量的关键设计选择。事件循环不同于许多其他语言的模型，其它语言创建额外线程来处理并发工作。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/file.md'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("moreWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// will run before console.log")]),t._v("\n")])])]),a("p",[t._v("基于该特性我们可以使用c语言重新开一个进程也能达到这种效果，但进程频繁的创建本身就是很大的开销,而node单线程运行就达到了这种效果，性能消耗大大减小。下面是伪代码")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\npid_t pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fork调用后")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程处理阻塞")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里我们处理异步任务")]),t._v("\n  FILE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fpWrite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("todoMore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("moreWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父进程会继续执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("分享： "),a("a",{attrs:{href:"https://www.zhihu.com/question/357717742/answer/1583543846"}},[t._v("Node.js 做 Web 后端优势为什么这么大？\n")])]),t._v(" "),a("h3",{attrs:{id:"进程中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程中断"}},[t._v("#")]),t._v(" 进程中断")]),t._v(" "),a("ol",[a("li",[t._v("进程第一时间保存当前进程的状态(PC指针，SP栈指针)，操作系统不管是谁在执行，都不在乎，马上就要去执行下一个进程了，要保存当前进程的状态，即当前进程对应的指针(SP栈指针, PC指针-当前进程运行到哪行了)")]),t._v(" "),a("li",[t._v("跳转终端向量（存放中断向量的首地址），将程序转向中断向量的入口，例如：鼠标中断，断点，内存溢出，故障等")]),t._v(" "),a("li",[t._v("中断响应程序, 防止当前的寄存器不受污染，必须保存当前的寄存器")]),t._v(" "),a("li",[t._v("设置新的SP栈指针；即以前被中断后排队等待执行的进程被中断时保存的现场")]),t._v(" "),a("li",[t._v("执行中断服务程序，不限于任何语言实现，读取中断关联的数据，例如进程读取文件发生阻塞后产生中断，知道已经拿到了文件数据，原进程再次执行时就需要将缓冲区拿到的文件数据(句柄（类似于文件id）)跟进程进行关联")]),t._v(" "),a("li",[t._v("执行中断服务程序，决定下一个进程")]),t._v(" "),a("li",[t._v("恢复SP指针， PC指针")])]),t._v(" "),a("h3",{attrs:{id:"总结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("进程随时都要保存自己的状态")]),t._v(" "),a("li",[t._v("进程随时都可能被切换")]),t._v(" "),a("li",[t._v("所有的进程都要排队")])]),t._v(" "),a("h2",{attrs:{id:"实战部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战部分"}},[t._v("#")]),t._v(" 实战部分")]),t._v(" "),a("p",[t._v("简单的实现一个操作系统原理的helloword，部分代码参考此处\n"),a("br"),t._v(" "),a("a",{attrs:{href:"https://github.com/yourtion/30dayMakeOS"}},[t._v("30天实现一个操作系统\n")]),t._v(" "),a("br"),t._v(" "),a("a",{attrs:{href:"https://wdkang.top/2021/01/26/"}},[t._v("MAC30天实现一个操作系统\n")]),t._v(" "),a("br"),t._v(" "),a("a",{attrs:{href:"https://github.dev/yourtion/30dayMakeOS"}},[t._v("vscode模式\n")])]),t._v(" "),a("h2",{attrs:{id:"第一天-hello-word"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一天-hello-word"}},[t._v("#")]),t._v(" 第一天 hello word")]),t._v(" "),a("h3",{attrs:{id:"了解汇编"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解汇编"}},[t._v("#")]),t._v(" 了解汇编")]),t._v(" "),a("p",[t._v("汇编语言，是除了机器语言外的最底层的编程语言了。了解这门语言，可以帮助我们更加深入地理解CPU、内存等硬件的工作原理。用机器的思维去操作计算机。汇编语言和机器语言是一一对应的，汇编语言被编译成机器语言，这样的程序执行效率更高。\n使用编译器，可以把汇编程序转译成机器指令程序。举例如下：\n把寄存器 BX 中的内容送到 AX 中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("机器指令：  1000100111011000\n汇编指令：  MOV  AX, BX\n")])])]),a("div",{staticClass:"language-hello.s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('; hello-os\n; TAB=4\n\n\t\tORG\t\t0x7c00\t\t\t; 指明程序装载地址， 0x7c00 BIOS读取操作系统的物理地址\n\n; 标准FAT12格式软盘专用的代码 Stand FAT12 format floppy code\n\n\t\tJMP\t\tentry\n\t\tDB\t\t0x90\n\t\tDB\t\t"HELLOIPL"\t\t; 启动扇区名称（8字节）\n\t\tDW\t\t512\t\t\t\t; 每个扇区（sector）大小（必须512字节）\n\t\tDB\t\t1\t\t\t\t; 簇（cluster）大小（必须为1个扇区）\n\t\tDW\t\t1\t\t\t\t; FAT起始位置（一般为第一个扇区）\n\t\tDB\t\t2\t\t\t\t; FAT个数（必须为2）\n\t\tDW\t\t224\t\t\t\t; 根目录大小（一般为224项）\n\t\tDW\t\t2880\t\t\t; 该磁盘大小（必须为2880扇区1440*1024/512）\n\t\tDB\t\t0xf0\t\t\t; 磁盘类型（必须为0xf0）\n\t\tDW\t\t9\t\t\t\t; FAT的长度（必??9扇区）\n\t\tDW\t\t18\t\t\t\t; 一个磁道（track）有几个扇区（必须为18）\n\t\tDW\t\t2\t\t\t\t; 磁头数（必??2）\n\t\tDD\t\t0\t\t\t\t; 不使用分区，必须是0\n\t\tDD\t\t2880\t\t\t; 重写一次磁盘大小\n\t\tDB\t\t0,0,0x29\t\t; 意义不明（固定）\n\t\tDD\t\t0xffffffff\t\t; （可能是）卷标号码\n\t\tDB\t\t"HELLO-OS   "\t; 磁盘的名称（必须为11字?，不足填空格）\n\t\tDB\t\t"FAT12   "\t\t; 磁盘格式名称（必??8字?，不足填空格）\n\t\tRESB\t18\t\t\t\t; 先空出18字节\n\n; 程序主体\n\nentry:\n\t\tMOV\t\tAX,0\t\t\t; 初始化寄存器\n\t\tMOV\t\tSS,AX\n\t\tMOV\t\tSP,0x7c00\n\t\tMOV\t\tDS,AX\n\t\tMOV\t\tES,AX\n\n\t\tMOV\t\tSI,msg\nputloop:\n\t\tMOV\t\tAL,[SI]\n\t\tADD\t\tSI,1\t\t\t; 给SI加1\n\t\tCMP\t\tAL,0      ; if (al == 0)\n\t\tJE\t\tfin       ; goto fin\n\t\tMOV\t\tAH,0x0e\t\t\t; 显示一个文字\n\t\tMOV\t\tBX,15\t\t\t; 指定字符颜色\n\t\tINT\t\t0x10\t\t\t; 调用显卡BIOS, 调用一个中断，bios提供给汇编语言的库函数，这些库函数都放入到一个数组里，int 0x10 意思是在库函数数组中取出第0x10个库函数，然后执行该库函数的代码\n\t\tJMP\t\tputloop\nfin:\n\t\tHLT\t\t\t\t\t\t; 让CPU停止，等待指令\n\t\tJMP\t\tfin\t\t\t\t; 无限循环\n\nmsg:\n\t\tDB\t\t0x0a, 0x0a\t\t; 换行两次\n\t\tDB\t\t"hello, world"\n\t\tDB\t\t0x0a\t\t\t; 换行\n\t\tDB\t\t0\n\n\t\tRESB\t0x7dfe-$\t\t; 填写0x00直到0x001fe\n\n\t\tDB\t\t0x55, 0xaa\n\n')])])]),a("h3",{attrs:{id:"编译汇编为二进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译汇编为二进制"}},[t._v("#")]),t._v(" 编译汇编为二进制")]),t._v(" "),a("p",[t._v("使用nasm工具输出.img操作系统镜像文件, 可以在虚拟机中新建一个光驱加载，也可以使用虚拟机qemu命令行工具进行加载")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nasm hello.s -o system.img   \n")])])]),a("p",[t._v("编译完成后安装完使用qemu运行"),a("code",[t._v("推荐使用brew直接安装即可，brew install qemu")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("qemu-system-i386 -hdd hello.img \n")])])]),a("h2",{attrs:{id:"第二天-加载软盘数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二天-加载软盘数据"}},[t._v("#")]),t._v(" 第二天 加载软盘数据")]),t._v(" "),a("p",[t._v("模拟3.5寸软盘，它有两个盘面 因此就对应两个磁头 每个盘面有80个磁道 也就是柱面 编号分别为0-79 每个柱面都有18个扇区 编号分别为1-18 所以一个盘面可以存储的数据量大小为：\n512 * 18 * 80\n一个软盘有两个盘面，因此一个软盘可以存储的数据为：\n2 * 512 * 18 * 80 = 1474560 Byte = 1440 KB = 1.5M\n"),a("br")]),t._v(" "),a("p",[t._v("使用汇编语言指定操作系统启动后读取制定位置软盘数据")]),t._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('org  0x7c00;\n\njmp  entry\ndb   0x90\nDB   "OSKERNEL"\nDW   512\nDB   1\nDW   1\nDB   2\nDW   224\nDW   2880\nDB   0xf0\nDW   9\nDW   18\nDW   2\nDD   0\nDD   2880\nDB   0,0,0x29\nDD   0xFFFFFFFF\nDB   "MYFIRSTOS  "\nDB   "FAT12   "\nRESB  18\n\nentry:\n    mov  ax, 0\n    mov  ss, ax\n    mov  ds, ax\n    mov  es, ax\n    mov  si, msg\n\n\nreadFloppy:\n    mov          CH, 1        ;CH 用来存储柱面号\n    mov          DH, 0        ;DH 用来存储磁头号\n    mov          CL, 2        ;CL 用来存储扇区号\n\n    mov          BX, msg       ; ES:BX 数据存储缓冲区\n\n    mov          AH, 0x02      ;  AH = 02 表示要做的是读盘操作\n    mov          AL,  1        ; AL 表示要练习读取几个扇区\n    mov          DL, 0         ;驱动器编号，一般我们只有一个软盘驱动器，所以写死   \n                               ;为0\n    INT          0x13          ;调用BIOS中断实现磁盘读取功能\n\n    jc           error\n\nputloop:\n    mov  al, [si]\n    add  si, 1\n    cmp  al, 0\n    je   fin\n    mov  ah, 0x0e\n    mov  bx, 15\n    int  0x10\n    jmp  putloop\n\n\n\nfin:\n    HLT\n    jmp  fin\n\nerror:\n    mov si, errmsg\n    jmp   putloop\n\nmsg:\n    RESB   64\nerrmsg:\n    DB "error"\n')])])]),a("p",[t._v("这时我们就可以运行"),a("code",[t._v("nasm target.s -o base.img")]),t._v("生成base.img文件了，但这个文件没有我们要写入的软盘的数据，所以我们用node.js对软盘进行二进制写入数据，其他语言皆可。\n"),a("br")]),t._v(" "),a("h4",{attrs:{id:"使用node对软盘数据进行写入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用node对软盘数据进行写入"}},[t._v("#")]),t._v(" 使用node对软盘数据进行写入")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bufferInit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化软盘数据, 2个盘面*80个磁道*18个扇区*扇区大小512k")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" panel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bufferInit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a text from cylinder 1 and sector 2"')]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./8-31/base.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组进行二进制操作")]),t._v("\n  arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个柱面第二个扇区存入我们的数据 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" charCode\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./8-31/system.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("panel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'binary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n")])])]),a("p",[t._v("这时就能生成写入我们自己数据的软盘了，然后使用第三方虚拟机导入该软盘，就可以看到")]),t._v(" "),a("p",[a("code",[t._v("被坑了三天，找来找去一直找不到原因，后来发现时虚拟机新建的时候随便选了win7，导致加载软驱一直异常，后来换了linux版就正常了")]),t._v(" "),a("img",{attrs:{src:t.$withBase("./../imgs/system4.png")}})]),t._v(" "),a("h2",{attrs:{id:"第三天-引导内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三天-引导内核"}},[t._v("#")]),t._v(" 第三天 引导内核")]),t._v(" "),a("p",[t._v("我们的系统内核,必须在虚拟软盘的第一扇区,但第一个扇区只有512个字节\n因此 系统内核不能超过512个字节，在实际的操作系统中，往往软驱只是一个入口，承担一个内核加载器的作用，然后跳转到内核的加载地址。\n所以，我们需要制作一个boot.asm去实现引导作用")]),t._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("org  0x7c00;\n\nLOAD_ADDR  EQU  0X8000\n\nentry:\n    mov  ax, 0\n    mov  ss, ax\n    mov  ds, ax\n    mov  es, ax\n    mov  si, ax\n\nreadFloppy:\n    mov          CH, 1        ;CH 用来存储柱面号\n    mov          DH, 0        ;DH 用来存储磁头号\n    mov          CL, 2        ;CL 用来存储扇区号\n\n    mov          BX, LOAD_ADDR       ; ES:BX 数据存储缓冲区\n\n    mov          AH, 0x02      ;  AH = 02 表示要做的是读盘操作\n    mov          AL,  1        ; AL 表示要练习读取几个扇区\n    mov          DL, 0         ;驱动器编号，一般我们只有一个软盘驱动器，所以写死   \n                               ;为0\n    INT          0x13          ;调用BIOS中断实现磁盘读取功能\n\n    JC           fin\n\n    jmp          LOAD_ADDR\n\n\n\nfin:\n    HLT\n    jmp  fin\n\n")])])]),a("p",[t._v("编译为二进制文件boot.img")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nasm ./boot.s -o boot.img\n")])])]),a("p",[t._v("然后我们再把内核需要执行的代码分开编译到另一个文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('org   0x8000\n\nentry:\n    mov  ax, 0\n    mov  ss, ax\n    mov  ds, ax\n    mov  es, ax\n    mov  si, msg\n\n\n putloop:\n    mov  al, [si]\n    add  si, 1\n    cmp  al, 0\n    je   fin\n    mov  ah, 0x0e\n    mov  bx, 15\n    int  0x10\n    jmp  putloop\n\nfin:\n    HLT\n    jmp  fin\n\n  msg:\n     DB   "This is Hello World from kernel"\n')])])]),a("p",[t._v("继续执行编译为二进制文件kernel.img")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nasm ./kernel.s -o kernel.img\n")])])]),a("p",[t._v("这时就有两个文件， 一个是基础的加载引导文件程序， 一个是内核代码，我们需要用node对其进行重新生成一个文件，且将内核代码写入道制定的扇区（第1柱面 第2扇区）")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bufferInit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化软盘数据, 2个盘面*80个磁道*18个扇区*扇区大小512k")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" panel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bufferInit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-2/boot.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内核引导")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sysBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-2/kernel.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内核代码")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组进行二进制操作")]),t._v("\n   sysBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入内核引导代码")]),t._v("\n     panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个柱面第二个扇区存入我们的数据 512*18*2 + 512")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入内核代码")]),t._v("\n     panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-2/system.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("panel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'binary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("执行后生成system.img后就可以通过虚拟机加载软盘，执行我们内核部分的代码打印了 "),a("code",[t._v("This is Hello World from kerne")]),t._v(" "),a("img",{attrs:{src:t.$withBase("./../imgs/system5.png")}})]),t._v(" "),a("h2",{attrs:{id:"第四天-保护模式启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四天-保护模式启动"}},[t._v("#")]),t._v(" 第四天 保护模式启动")]),t._v(" "),a("p",[t._v("主要解决内存寻址的问题，从1M(2^20)到4GB(2^32)\n因为早起都是实模式，dos界面，在实模式下，cpu只能处理最多16位的数据，同时地址总线也就20位，因此能访问的最大内存也就2^20 字节，也就是1M多，在保护模式下，cpu可以处理32位的数据，同时地址总线也扩张到32位，这样，cpu能访问的内存就可以一下子达到4G，开始支持图形化界面")]),t._v(" "),a("p",[t._v("boot.s\n操作系统启动并读取上一章节制定软盘内的内容并执行")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("org  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x7c00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOAD_ADDR")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EQU")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0X9000")]),t._v("\n\njmp  entry\ndb   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x90")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OSKERNEL"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("224")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2880")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DW")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DD")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DD")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2880")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x29")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DD")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MYFIRSTOS  "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FAT12   "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RESB")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n\nentry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    mov  ax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    mov  ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n    mov  ds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n    mov  es"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n    mov  si"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n\n\nreadFloppy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CH")]),t._v(" 用来存储柱面号\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DH")]),t._v(" 用来存储磁头号\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CL")]),t._v(" 用来存储扇区号\n\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOAD_ADDR")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ES")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BX")]),t._v(" 数据存储缓冲区\n\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("02")]),t._v(" 表示要做的是读盘操作\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AL")]),t._v(" 表示要练习读取几个扇区\n    mov          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("驱动器编号，一般我们只有一个软盘驱动器，所以写死   \n                               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("为"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INT")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x13")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("调用"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BIOS")]),t._v("中断实现磁盘读取功能\n   \n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JC")]),t._v("           fin\n\n    jmp          "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOAD_ADDR")]),t._v("\n\n\n\nfin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HLT")]),t._v("\n    jmp  fin\n")])])]),a("p",[t._v("然后使用"),a("code",[t._v("nasm boot.s -o boot.img")]),t._v("生成boot.img镜像文件\n新建kernel.s，即boot.s执行跳转的地方，include导入pm.inc的内容，pm.inc类似于用另一种的数据结构区存储内存地址的引用，所以当访问某个地址时会先拿到其存储的内容后才能访问到具体的地址。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pm.inc"')]),t._v("\n\norg   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x9000")]),t._v("\n\njmp   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_BEGIN")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gdt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                  段基址          段界限                属性\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_GDT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("          Descriptor        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_CODE32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  Descriptor        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      SegCode32Len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DA_C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DA_32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_VIDEO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   Descriptor     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("B8000h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("ffffh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DA_DRW")]),t._v("\n\nGdtLen     equ    $ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_GDT")]),t._v("\nGdtPtr     dw     GdtLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n         dd     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\nSelectorCode32    equ   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_CODE32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_GDT")]),t._v("\nSelectorVideo     equ   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_VIDEO")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_GDT")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECTION")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s16"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_BEGIN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   mov   ax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cs\n   mov   ds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n   mov   es"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n   mov   ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n   mov   sp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0100")]),t._v("h\n\n   xor   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eax\n   mov   ax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  cs\n   shl   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n   add   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_SEG_CODE32")]),t._v("\n   mov   word "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_CODE32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n   shr   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n   mov   byte "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_CODE32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" al\n   mov   byte "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_DESC_CODE32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ah\n\n   xor   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eax\n   mov   ax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ds\n   shl   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n   add   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_GDT")]),t._v("\n   mov   dword  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GdtPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eax\n\n   lgdt  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GdtPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n   cli   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("关中断\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("    al"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),t._v("h\n   or    al"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010")]),t._v("b\n   out   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" al\n\n   mov   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cr0\n   or    eax "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   mov   cr0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eax\n\n   jmp   dword  SelectorCode32"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BITS")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_SEG_CODE32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  mov   ax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SelectorVideo\n  mov   gs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n  mov   si"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg\n  mov   ebx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  mov   ecx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nshowChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  mov   edi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  add   edi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ebx\n  mov   eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" edi\n  mul   ecx\n  mov   edi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eax\n  mov   ah"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("ch\n  mov   al"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("si"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  cmp   al"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  je    end\n  add   ebx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  add   si"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  mov   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("gs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("edi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ax\n  jmp    showChar\nend"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n  jmp   $\n  msg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Protect Mode"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\nSegCode32Len   equ  $ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LABEL_SEG_CODE32")]),t._v("\n")])])]),a("p",[t._v("pm.inc")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("%macro Descriptor 3\n    dw    %2  &  0FFFFh\n    dw    %1  &  0FFFFh\n    db   (%1>>16) & 0FFh\n    dw   ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)\n    db   (%1 >> 24) & 0FFh\n%endmacro\n\n\nDA_32       EQU 4000h   ; 32 位段\nDA_C        EQU 98h ; 存在的只执行代码段属性值\nDA_DRW      EQU 92h ; 存在的可读写数据段属性值\n")])])]),a("p",[a("code",[t._v("nasm kernel.s -o kernel.img")]),t._v("继续生成镜像文件")]),t._v(" "),a("p",[t._v("继续使用node生成镜像文件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bufferInit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化软盘数据, 2个盘面*80个磁道*18个扇区*扇区大小512k")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" panel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bufferInit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-4/boot.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要被写入的内核代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sysBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-4/kernel.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组进行二进制操作")]),t._v("\n    sysBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个柱面第二个扇区存入我们的数据 512*18*2 + 512")]),t._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-4/system.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("panel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'binary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("img",{attrs:{src:t.$withBase("./../imgs/system6.png")}}),t._v(" "),a("h2",{attrs:{id:"第五天-保护模式超强寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五天-保护模式超强寻址"}},[t._v("#")]),t._v(" 第五天 保护模式超强寻址")]),t._v(" "),a("p",[t._v("全局描述符表(GDT) 该表的表项就叫描述符(descriptor),在描述符中 专门抽出4个字节 也就是32位数据来表示内存的基地址,这样,内存访问一下子就达到了4G,在原来的实模式下,cs, ds这些16位的寄存器往往用来存储段值")]),t._v(" "),a("p",[t._v("在保护模式下 这些寄存器用来存储指向GDT某个描述符的索引")]),t._v(" "),a("p",[t._v("在保护模式下 访问某处的内存时 仍然使用 "),a("code",[t._v("[寄存器:偏移]")]),t._v(" 的方式，但是CPU的对地址的计算方法不再使用上面的公式，而是把寄存器中的值当做访问GDT的索引，在GDT中找到对应的描述符，从描述符中获得要访问内存的基地址，然后将基地址加上偏移，进而得到要访问的具体地址。\n我们需要模拟写入一个地址5M以外的数据，以测试寻址效果\nboot-read5m.s")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('%include "pm.inc"\n\norg   0x7c00\n\njmp   LABEL_BEGIN\n\n[SECTION .gdt]\n ;                                  段基址          段界限                属性\nLABEL_GDT:          Descriptor        0,            0,                   0  \nLABEL_DESC_CODE32:  Descriptor        0,      SegCode32Len - 1,       DA_C + DA_32\nLABEL_DESC_VIDEO:   Descriptor     0B8000h,         0ffffh,           DA_DRW\nLABEL_DESC_5M:      Descriptor     0500000h,        0ffffh,           DA_DRW\n\nGdtLen     equ    $ - LABEL_GDT\nGdtPtr     dw     GdtLen - 1\n           dd     0\n\nSelectorCode32    equ   LABEL_DESC_CODE32 -  LABEL_GDT\nSelectorVideo     equ   LABEL_DESC_VIDEO  -  LABEL_GDT\nSelector5M        equ   LABEL_DESC_5M - LABEL_GDT\n\n[SECTION  .s16]\n[BITS  16]\nLABEL_BEGIN:\n     mov   ax, cs\n     mov   ds, ax\n     mov   es, ax\n     mov   ss, ax\n     mov   sp, 0100h\n\n     xor   eax, eax\n     mov   ax,  cs\n     shl   eax, 4\n     add   eax, LABEL_SEG_CODE32\n     mov   word [LABEL_DESC_CODE32 + 2], ax\n     shr   eax, 16\n     mov   byte [LABEL_DESC_CODE32 + 4], al\n     mov   byte [LABEL_DESC_CODE32 + 7], ah\n\n     xor   eax, eax\n     mov   ax, ds\n     shl   eax, 4\n     add   eax,  LABEL_GDT\n     mov   dword  [GdtPtr + 2], eax\n\n     lgdt  [GdtPtr]\n\n     cli   ;关中断\n\n     in    al,  92h\n     or    al,  00000010b\n     out   92h, al\n\n     mov   eax, cr0\n     or    eax , 1\n     mov   cr0, eax\n\n     jmp   dword  SelectorCode32: 0\n\n     [SECTION .s32]\n     [BITS  32]\nLABEL_SEG_CODE32:\n    mov   ax, SelectorVideo\n    mov   gs, ax\n\n    mov   si, msg\n    mov   ax, Selector5M    ;用 es 指向5M内存描述符\n    mov   es, ax\n    mov   edi, 0\n\nwrite_msg_to_5M:  ;将si指向的字符一个个写到5M内存处\n    cmp   byte [si], 0\n    je    prepare_to_show_char\n    mov   al, [si]\n    mov   [es:edi], al\n    add   edi, 1\n    add   si, 1\n    jmp   write_msg_to_5M\n\n\nprepare_to_show_char:\n    mov   ebx, 10\n    mov   ecx, 2\n    mov   si, 0\n\nshowChar:\n    mov   edi, (80*11)\n    add   edi, ebx\n    mov   eax, edi\n    mul   ecx\n    mov   edi, eax\n    mov   ah, 0ch\n    mov   al, [es:si]  ;由于es指向描述符LABEL_DESC_5M， 所以es:si 表示的地址是从5M开始的内存,si表示从5M开始后的偏移\n    cmp   al, 0\n    je    end\n    add   ebx,1\n    add   si, 1\n    mov   [gs:edi], ax\n    jmp   showChar\nend: \n    jmp   $\n    msg:\n    DB     "This string is writeen to 5M memory", 0\n\nSegCode32Len   equ  $ - LABEL_SEG_CODE32\n')])])]),a("p",[t._v("其他操作和第四天一致， 然后运行我们生成的的system.img就会打印"),a("code",[t._v("This string is writeen to 5M memory")]),t._v(" "),a("img",{attrs:{src:t.$withBase("./../imgs/system7.png")}})]),t._v(" "),a("h2",{attrs:{id:"第六天-交叉编译-汇编-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六天-交叉编译-汇编-c"}},[t._v("#")]),t._v(" 第六天 交叉编译 汇编+C")]),t._v(" "),a("p",[t._v("主要通过编译技术将多种不同的语言最终编译为一种后进而实现相互之间调用")]),t._v(" "),a("h3",{attrs:{id:"整体思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体思路"}},[t._v("#")]),t._v(" 整体思路")]),t._v(" "),a("ol",[a("li",[t._v("汇编写的代码通过nasm生成二进制文件")]),t._v(" "),a("li",[t._v("C语言的代码通过gcc编译并链接")]),t._v(" "),a("li",[t._v("gcc生成的二进制文件进行反汇编，得到汇编代码")]),t._v(" "),a("li",[t._v("将步骤1和步骤3的代码进行合并")])]),t._v(" "),a("h3",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),a("p",[t._v("使用brew安装编译工具")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("brew install i386-elf-binutils\nbrew install i386-elf-gcc\n")])])]),a("p",[t._v("使用brew安装后的命令行命令可能因为各平台或者系统版本都有差异， 可通过命令行输入一些关键信息按tab键查看相关命令找到自己相关的命令\n"),a("img",{attrs:{src:t.$withBase("./../imgs/system8.png")}})]),t._v(" "),a("p",[t._v("看了很多其他作者的相关文章，原本想说自己使用gcc生成，后来发现新版的mac系统的xcode已经不支持生成32位了，mac和ubantu等系统的教程大多都是根据自己的系统相关信息从而不一致的命令， 如部分博主的命令：i386-elf-gcc， i386-elf-ld, ld,等等。")]),t._v(" "),a("p",[a("code",[t._v("上所有的操作默认编译32位系统， 目前最新的mac平台已经不支持32位了，所以我们要用第三方工具生成， 推荐使用linux虚拟机进行实验或者windows平台, MAC平台以下操作不能直接使用系统自带的gcc完成")])]),t._v(" "),a("p",[t._v("汇编 => 二进制文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nasm -f elf32 -o foo.o foo.asm\n")])])]),a("p",[t._v("c文件 => 汇编")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("x86_64-elf-gcc -m32 bar.c -S  -o bar.asm\n")])])]),a("p",[t._v("c => 二进制文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("x86_64-elf-gcc -m32 -fno-asynchronous-unwind-tables -s -c -o bar.o bar.c\n")])])]),a("p",[t._v("然后将上面两个生产的.o文件进行链接：")]),t._v(" "),a("div",{staticClass:"language-zsh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("x86_64-elf-ld -m elf_i386 foo.o bar.o -o foobar\n")])])]),a("p",[t._v("利用编译工具我们能将下面c代码编译为汇编代码")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo_print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo_print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the 1st one\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo_print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the 2nd one\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("编译后的结果")]),t._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("; Disassembly of file: bar.o\n; Mon Sep 13 21:58:35 2021\n; Mode: 32 bits\n; Syntax: YASM/NASM\n; Instruction set: 80386\n\n\nglobal bar_func: function\n\nextern foo_print                                        ; near\n\n\nSECTION .text   align=1 execute                         ; section number 1, code\n\nbar_func:; Function begin\n        push    ebp                                     ; 0000 _ 55\n        mov     ebp, esp                                ; 0001 _ 89. E5\n        sub     esp, 8                                  ; 0003 _ 83. EC, 08\n        mov     eax, dword [ebp+8H]                     ; 0006 _ 8B. 45, 08\n        cmp     eax, dword [ebp+0CH]                    ; 0009 _ 3B. 45, 0C\n        jle     ?_001                                   ; 000C _ 7E, 14\n        sub     esp, 8                                  ; 000E _ 83. EC, 08\n        push    13                                      ; 0011 _ 6A, 0D\n        push    ?_003                                   ; 0013 _ 68, 00000000(d)\n        call    foo_print                               ; 0018 _ E8, FFFFFFFC(rel)\n        add     esp, 16                                 ; 001D _ 83. C4, 10\n        jmp     ?_002                                   ; 0020 _ EB, 12\n\n?_001:  sub     esp, 8                                  ; 0022 _ 83. EC, 08\n        push    13                                      ; 0025 _ 6A, 0D\n        push    ?_004                                   ; 0027 _ 68, 0000000D(d)\n        call    foo_print                               ; 002C _ E8, FFFFFFFC(rel)\n        add     esp, 16                                 ; 0031 _ 83. C4, 10\n?_002:  mov     eax, 0                                  ; 0034 _ B8, 00000000\n        leave                                           ; 0039 _ C9\n        ret                                             ; 003A _ C3\n; bar_func End of function\n\n\nSECTION .data   align=1 noexecute                       ; section number 2, data\n\n\nSECTION .bss    align=1 noexecute                       ; section number 3, bss\n\n\nSECTION .rodata align=1 noexecute                       ; section number 4, const\n\n?_003:                                                  ; byte\n        db 74H, 68H, 65H, 20H, 31H, 73H, 74H, 20H       ; 0000 _ the 1st \n        db 6FH, 6EH, 65H, 0AH, 00H                      ; 0008 _ one..\n\n?_004:                                                  ; byte\n        db 74H, 68H, 65H, 20H, 32H, 6EH, 64H, 20H       ; 000D _ the 2nd \n        db 6FH, 6EH, 65H, 0AH, 00H                      ; 0015 _ one..\n\n")])])]),a("p",[t._v("然后在一个汇编文件中调用该c代码编译后的汇编文件")]),t._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n[section .data]\narg1  dd 3\narg2  dd 4\n\n[section .text]\nglobal main\nglobal foo_print\n\nmain:\n\nmov   eax, dword[arg1]\npush  eax\nmov   eax, dword [arg2]\npush  eax\ncall  bar_func\nadd   esp, 8\n\nmov   ebx,0\nmov   eax, 1\nint   0x80\n\nfoo_print:\nmov   edx, [esp + 8]\nmov   ecx, [esp + 4]\nmov   ebx, 1\nmov   eax, 4\nint   0x80\nret\n\n%include "bar.asm"\n')])])]),a("h4",{attrs:{id:"注：-不同的教材和不同的平台都会有所不同，"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注：-不同的教材和不同的平台都会有所不同，"}},[t._v("#")]),t._v(" 注： 不同的教材和不同的平台都会有所不同，")]),t._v(" "),a("p",[t._v("只要安装完工具能正常运行即可， 后续的步骤会用到该工具进行各种编译")]),t._v(" "),a("h2",{attrs:{id:"第七天-绘制图形界面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七天-绘制图形界面"}},[t._v("#")]),t._v(" 第七天 绘制图形界面")]),t._v(" "),a("p",[t._v("要想由字符模式转入图形模式，我们需要操作硬件，特别是向显卡发送命令，让其进入图形显示模式，就如同前面我们所做的，要操作硬件，一般需要使用BIOS调用，以下几行就是打开VGA显卡色彩功能的代码：")]),t._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mov  al, 0x13h\nmov  ah, 0x00\nint  0x10\n")])])]),a("p",[t._v("其中al 的值决定了要设置显卡的色彩模式，下面是一些常用的模式设置：\n0x03, 16色字符模式\n0x12, VGA图形模式, 640 * 480 * 4位彩色模式，独特的4面存储模式\n0x13, VGA图形模式, 320 * 200 * 8位彩色模式，调色板模式\n0x6a, 扩展VGA图形模式， 800 * 600 * 4彩色模式")]),t._v(" "),a("h3",{attrs:{id:"汇编系统内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汇编系统内核"}},[t._v("#")]),t._v(" 汇编系统内核")]),t._v(" "),a("p",[t._v("结合第三天的知识， 我们需要使用第三天的boot.asm去加载我们的系统内核kernel.asm, 该内核主要实现保护模式启动，以及为C语言创建512字节大小的函数堆栈传惨调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('%include "pm.inc"\n\norg   0x9000\n\njmp   LABEL_BEGIN\n\n[SECTION .gdt]\n ;                                  段基址          段界限                属性\nLABEL_GDT:          Descriptor        0,            0,                   0  \nLABEL_DESC_CODE32:  Descriptor        0,      SegCode32Len - 1,       DA_C + DA_32\nLABEL_DESC_VIDEO:   Descriptor        0B8000h,         0ffffh,            DA_DRW\nLABEL_DESC_VRAM:    Descriptor        0,         0ffffffffh,            DA_DRW\nLABEL_DESC_STACK:   Descriptor        0,             TopOfStack,        DA_DRWA+DA_32\n\nGdtLen     equ    $ - LABEL_GDT\nGdtPtr     dw     GdtLen - 1\n           dd     0\n\nSelectorCode32    equ   LABEL_DESC_CODE32 -  LABEL_GDT\nSelectorVideo     equ   LABEL_DESC_VIDEO  -  LABEL_GDT\nSelectorStack     equ   LABEL_DESC_STACK  -  LABEL_GDT\nSelectorVram      equ   LABEL_DESC_VRAM   -  LABEL_GDT\n\n\n[SECTION  .s16]\n[BITS  16]\nLABEL_BEGIN:\n     mov   ax, cs\n     mov   ds, ax\n     mov   es, ax\n     mov   ss, ax\n     mov   sp, 0100h\n\n     mov   al, 0x13\n     mov   ah, 0\n     int   0x10\n\n     xor   eax, eax\n     mov   ax,  cs\n     shl   eax, 4\n     add   eax, LABEL_SEG_CODE32\n     mov   word [LABEL_DESC_CODE32 + 2], ax\n     shr   eax, 16\n     mov   byte [LABEL_DESC_CODE32 + 4], al\n     mov   byte [LABEL_DESC_CODE32 + 7], ah\n\n     ;set stack for C language\n     xor   eax, eax\n     mov   ax,  cs\n     shl   eax, 4\n     add   eax, LABEL_STACK\n     mov   word [LABEL_DESC_STACK + 2], ax\n     shr   eax, 16\n     mov   byte [LABEL_DESC_STACK + 4], al\n     mov   byte [LABEL_DESC_STACK + 7], ah\n\n     xor   eax, eax\n     mov   ax, ds\n     shl   eax, 4\n     add   eax,  LABEL_GDT\n     mov   dword  [GdtPtr + 2], eax\n\n     lgdt  [GdtPtr]\n\n     cli   ;关中断\n\n     in    al,  92h\n     or    al,  00000010b\n     out   92h, al\n\n     mov   eax, cr0\n     or    eax , 1\n     mov   cr0, eax\n\n     jmp   dword  SelectorCode32: 0\n\n     [SECTION .s32]\n     [BITS  32]\n     LABEL_SEG_CODE32:\n     ;initialize stack for c code\n     mov  ax, SelectorStack\n     mov  ss, ax\n     mov  esp, TopOfStack\n\n     mov  ax, SelectorVram\n     mov  ds,  ax\n\nC_CODE_ENTRY:\n     %include "write_vga.asm"\n\n\n     io_hlt:  ;void io_hlt(void);\n      HLT\n      RET\n\nSegCode32Len   equ  $ - LABEL_SEG_CODE32\n\n[SECTION .gs]\nALIGN 32\n[BITS 32]\nLABEL_STACK:\ntimes 512  db 0\nTopOfStack  equ  $ - LABEL_STACK\n')])])]),a("p",[t._v("语句%include write_vga.asm”， 表明，我们要开发的C代码文件叫write_vga.c, 我们写完C代码后，会使用上一节的步骤将它编译成汇编，然后include到我们当前的汇编文件里，统一编译成可执行内核。")]),t._v(" "),a("p",[t._v("使用c绘制颜色")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CMain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xa0000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xaffff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("io_hlt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("先将c生成二进制")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("x86_64-elf-gcc -m32 -fno-asynchronous-unwind-tables -s -c -o write_vga.o write_vga.c\n")])])]),a("p",[t._v("然后在反汇编生成汇编代码")]),t._v(" "),a("p",[a("code",[t._v("注意： 在生产汇编代码中去掉以section 开始的指令，这些指令会影响我们把当前汇编结合入内核kerne.asm. 同时去掉开头的两句：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("./objconv -fnasm write_vga.o write_vga.asm\n")])])]),a("p",[t._v("然后再将内核代码生成二进制， 内核依赖的pm.inc(pm.inc可在第四天保护模式找到)和write_vga.asm文件我们都已经生成")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nasm -o kernel.bat kernel.asm\n")])])]),a("p",[t._v("kernel.bat写入了两个扇区，也就是说，我们内核的大小已经超过了512字节。此时我们需要修改一下内核加载器，让内核加载器一次读入两个扇区才能把内核完全加载入内存，打开boot.asm，将readFloppy中的：\nmov ah, 0x02\nmov al, 1\n改成：\nmov al, 2")]),t._v(" "),a("h3",{attrs:{id:"使用node合并为一个文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用node合并为一个文件"}},[t._v("#")]),t._v(" 使用node合并为一个文件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bufferInit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化软盘数据, 2个盘面*80个磁道*18个扇区*扇区大小512k")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" panel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bufferInit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-13/boot.bat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要被写入的内核代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sysBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-13/kernel.bat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组进行二进制操作")]),t._v("\n    sysBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个柱面第二个扇区存入我们的数据 512*18*2 + 512")]),t._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      panel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startLoction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./9-13/system.img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("panel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'binary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("运行node后使用虚拟机运行我们的system.img文件\n"),a("img",{attrs:{src:t.$withBase("./../imgs/system9.png")}})]),t._v(" "),a("p",[t._v("后期会将所有的代码和objconv工具（适用mac平台）上传到github并在每个章节后附带地址")]),t._v(" "),a("p",[t._v("接下来就要引入c语言环境，然后就可以基于C语言实现图形化界面，鼠标，命令行工具，抽象出上述操作系统的一些概念，如线程，进程，中断，文件系统等。")])])}),[],!1,null,null,null);s.default=e.exports}}]);